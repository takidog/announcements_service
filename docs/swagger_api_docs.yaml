swagger: '2.0'
info:
  version: '1.0'
  title: announce_service
  contact: {}
host: example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /announcements/add:
    post:
      summary: add application (for user)
      tags:
      - application
      operationId: addapplication(foruser)
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: Authorization
        in: header
        required: false
        default: Bearer {token}
        type: string
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/addapplication%28foruser%29request'
      responses:
        200:
          description: 'Success.'
          schema:
            type: object
            properties:
              id:
                type: string
                description: id
                example: "application_id"
        401:
          description: "JWT expired."
  /application/application_id:
    put:
      summary: Update application (for editor)
      tags:
      - application
      operationId: Updateapplication(foreditor)
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: Authorization
        in: header
        required: false
        default: Bearer {token}
        type: string
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/Updateapplication%28foreditor%29Request'
      responses:
        200:
          description: ''
          headers: {}
    post:
      summary: approve application (for editor)
      tags:
      - application
      operationId: approveapplication(foreditor)
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: Authorization
        in: header
        required: false
        default: Bearer {token}
        type: string
      responses:
        200:
          description: ''
          headers: {}
    delete:
      summary: remove application (for editor)
      tags:
      - application
      operationId: removeapplication(foreditor)
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: Authorization
        in: header
        required: false
        default: Bearer {token}
        type: string
      responses:
        200:
          description: ''
          headers: {}

  /application:
    get:
      summary: get all application (for editor)
      tags:
      - application
      operationId: getallapplication(foreditor)
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: Authorization
        in: header
        required: false
        default: Bearer {token}
        type: string
      responses:
        200:
          description: ''
          headers: {}
  /login:
    post:
      summary: login
      tags:
      - auth
      operationId: login
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: Authorization
        in: header
        required: false
        default: Bearer {token}
        type: string
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/loginrequest'
      responses:
        200:
          description: ''
          headers: {}
  /register:
    post:
      summary: register
      tags:
      - auth
      operationId: register
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: Authorization
        in: header
        required: false
        default: Bearer {token}
        type: string
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/registerrequest'
      responses:
        200:
          description: ''
          headers: {}
  /auth/editor:
    get:
      summary: get editor list
      tags:
      - auth
      operationId: geteditorlist
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: Authorization
        in: header
        required: false
        default: Bearer {token}
        type: string
      responses:
        200:
          description: ''
          headers: {}
    post:
      summary: Add editor
      tags:
      - auth
      operationId: Addeditor
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: Authorization
        in: header
        required: false
        default: Bearer {token}
        type: string
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          example: >-
            {
                "username":{{username}}
            }
          type: string
      responses:
        200:
          description: ''
          headers: {}
    delete:
      summary: remove editor
      tags:
      - auth
      operationId: removeeditor
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: Authorization
        in: header
        required: false
        default: Bearer {token}
        type: string
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/removeeditorrequest'
      responses:
        200:
          description: ''
          headers: {}
  /announcements/update/1:
    put:
      summary: announcement update
      tags:
      - announcement
      operationId: announcementupdate
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: Authorization
        in: header
        required: false
        default: Bearer {token}
        type: string
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/announcementupdaterequest'
      responses:
        200:
          description: ''
          headers: {}
  /announcements/delete/1:
    delete:
      summary: announcement delete
      tags:
      - announcement
      operationId: announcementdelete
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: Authorization
        in: header
        required: false
        default: Bearer {token}
        type: string
      responses:
        200:
          description: ''
          headers: {}
  /announcements:
    get:
      summary: get all
      tags:
      - announcement
      operationId: getall
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: Authorization
        in: header
        required: false
        default: Bearer {token}
        type: string
      responses:
        200:
          description: ''
          headers: {}
    post:
      summary: get tag by POST
      tags:
      - announcement
      operationId: gettagbyPOST
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: Authorization
        in: header
        required: false
        default: Bearer {token}
        type: string
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/gettagbyPOSTRequest'
      responses:
        200:
          description: ''
          headers: {}
  /announcements/tags:
    get:
      summary: get tag count
      tags:
      - announcement
      operationId: gettagcount
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: Authorization
        in: header
        required: false
        default: Bearer {token}
        type: string
      responses:
        200:
          description: ''
          headers: {}
definitions:
  addapplication(foruser)request:
    title: addapplication(foruser)request
    example:
      title: expire test
      expireTime: 2020-09-28T02:07:00H
    type: object
    properties:
      title:
        type: string
      expireTime:
        type: string
    required:
    - title
    - expireTime
  Updateapplication(foreditor)Request:
    title: Updateapplication(foreditor)Request
    example:
      title: 'expire test update '
    type: object
    properties:
      title:
        type: string
    required:
    - title
  loginrequest:
    title: loginrequest
    example:
      username: '{{username}}'
      password: '{{password}}'
    type: object
    properties:
      username:
        type: string
      password:
        type: string
    required:
    - username
    - password
  registerrequest:
    title: registerrequest
    example:
      username: '{{username}}'
      password: '{{password}}'
    type: object
    properties:
      username:
        type: string
      password:
        type: string
    required:
    - username
    - password
  removeeditorrequest:
    title: removeeditorrequest
    example:
      username: '{{username}}'
    type: object
    properties:
      username:
        type: string
    required:
    - username
  announcementaddrequest:
    title: announcementaddrequest
    example:
      title: expire test
      expireTime: "2020-09-28T02:07:00H"
    type: object
    properties:
      title:
        type: string
      expireTime:
        type: string
    required:
    - title
    - expireTime
  announcementupdaterequest:
    title: announcementupdaterequest
    example:
      title: doge123
      tag:
      - 中文
      - 用標籤拉
    type: object
    properties:
      title:
        type: string
      tag:
        type: array
        items:
          type: string
    required:
    - title
    - tag
  gettagbyPOSTRequest:
    title: gettagbyPOSTRequest
    example:
      tag:
      - test
      lang: zh
    type: object
    properties:
      tag:
        type: array
        items:
          type: string
      lang:
        type: string
    required:
    - tag
    - lang
tags:
- name: application
- name: auth
- name: announcement
